<?xml version='1.0' encoding='UTF-8'?>
<agent-input>
  <variables>
    <variable name='sharedLocation' value='{{ __imshared_location }}'/>
  </variables>
  <server>
  <!-- Location of the IBM Connections repository.config -->
    <repository location='{{ __tmp_dir }}/cnx/HCL_Connections_Install/HCLConnections'/>
    {% if cnx_fixes_version is defined %}
    <repository location='{{ __tmp_dir }}/cnx-cr/updates'/>
    {% endif %}
  </server>

  <!-- Specify name and version data for IBM Installation Manager and IBM Connections, and specify which applications to install. -->
  <profile id='HCL Connections' installLocation='{{ __cnx_install_location }}'>
    <data key='cic.selector.arch' value='x86_64'/>
	<!-- Set the value for the current operation. The default value is "INSTALL" -->
    <data key='user.job' value='INSTALL'/>
    <data key='user.lcinstallscript.path' value='{{ __tmp_dir }}/CTemp/LCInstallScript'/>
    <!-- <data key='user.nodeslist' value='Node01,'/> -->
    <data key='user.nodeslist' value='{% for node in groups.cnx_was_servers %}{{ node.split('.')[0] }}-node,{% endfor %}'/>
    <!-- <data key='user.nodeAgentList' value='Node01:true;'/> -->
    <data key='user.nodeAgentList' value='{% for node in groups.cnx_was_servers %}{{ node.split('.')[0] }}-node:true;{% endfor %}'/>
    <!-- <data key='user.nodesServerlist' value='{% for node in groups.ihs_servers %}{{ node }}-node:{{ node.split('.')[0] }};{% endfor %}'/> -->
    <data key='user.nodesServerlist' value='{% for node in groups.ihs_servers %}{{ node.split('.')[0] }}-node:{{ node.split('.')[0] }};{% endfor %}'/>
    <!-- <data key='user.nodesHostnamelist' value='example.ibm.com,'/> -->
     <data key='user.nodesHostnamelist' value='{% for node in groups.cnx_was_servers %}{{ node }},{% endfor %}'/>
    <data key='user.isGUIMode' value='F'/>


	<!-- Passwords should be encrpted. To learn how to create encrypted versions of passwords, go to the "Creating encrypted passwords for a response file" topic in the IBM Connections documentation wiki at
	http://www-01.ibm.com/support/knowledgecenter/SSYGQH_5.5.0/welcome/welcome_admin.html -->
    <data key='user.was.install.location' value='{{ __was_install_location }}'/>
    <data key='user.was.install.location.configproperties' value='{{ __was_install_location }}'/>
    <data key='user.was.install.location.win32format' value='{{ __was_install_location }}'/>
    <data key='user.was.userhome.original' value='{{ __was_install_location }}/profiles/{{ __profile_name }}'/>
    <data key='user.was.userhome' value='{{ __was_install_location }}/profiles/{{ __profile_name }}'/>
    <data key='user.was.userhome.configproperties' value='{{ __was_install_location }}/profiles/{{ __profile_name }}'/>
    <data key='user.was.wasSoapPort' value='8879'/>
    <data key='user.was.profileName' value='{{ __profile_name }}'/>
    <data key='user.was.dmCellName' value='{{ __was_cellname }}'/>
    <data key='user.was.dmHostname' value='{{ dmgr_hostname }}'/>
    <data key='user.was.domainName' value='.{{ ansible_domain }}'/>
    <data key='user.was.adminuser.id' value='{{ was_username }}'/>
    <data key='user.was.adminuser.password' value='{{ __was_encoded_password.stdout | trim }}'/>
{% for app in __installer_deployment_type %}
    <data key='user.{{ app.name }}.adminuser.id' value='{{ was_username }}'/>
    <data key='user.{{ app.name }}.adminuser.password' value='{{ __was_encoded_password.stdout | trim }}'/>
{% endfor %}
{% if ccm_install is defined %}
    <data key='user.ccm.install.now' value='true'/>
    <data key='user.ccm.installers.original.path' value='{{ __tmp_dir }}/cnx'/>
    <data key='user.ccm.installers.path' value='{{ __tmp_dir }}/cnx'/>
    <data key='user.ccm.ce.installer' value='{{ __ccm_files[0].file_name }}'/>
    <data key='user.ccm.ce.fp.installer' value='{{ __ccm_files[1].file_name }}'/>
    <data key='user.ccm.ceclient.installer' value='{{ __ccm_files[2].file_name }}'/>
    <data key='user.ccm.fncs.installer' value='{{ __ccm_files[3].file_name }}'/>
    <data key='user.ccm.fncs.fp.installer' value='{{ __ccm_files[4].file_name }}'/>

    <data key='user.ccm.existingDeployment' value='false'/>
    <data key='user.ccm.userName' value='{{ was_username }}'/>
    <data key='user.ccm.password' value='{{ __was_encoded_password.stdout | trim }}'/>

{% endif %}
    <data key='user.deployment.type' value='{{ __cnx_deploy_type }}'/>
<!--
    <data key='user.blogs.clusterExist' value='false'/>
    <data key='user.blogs.clusterName' value='ICCluster'/>
    <data key='user.blogs.firstNodeName' value='Node01'/>
    <data key='user.blogs.serverInfo' value='blogs.Node01.ServerName=ICCluster_server1;'/>
    <data key='user.blogs.clusterInfo' value='[{&quot;node&quot;: &quot;Node01&quot;, &quot;name&quot;: &quot;ICCluster_server1&quot;},]'/> -->

{% for app in __installer_deployment_type %}
    <data key='user.{{ app.name }}.clusterExist' value='false'/>
    <data key='user.{{ app.name }}.clusterName' value='{{ app.cluster_name }}'/>
    <data key='user.{{ app.name }}.firstNodeName' value='{{ app.nodes[0].split('.')[0] }}-node'/>
    <data key='user.{{ app.name }}.secondaryNodesNames' value='{% for node in app.nodes[1:] %}{{ node.split('.')[0] }}-node,{% endfor %}'/>
    <data key='user.{{ app.name }}.serverInfo' value='{% for node in app.nodes %}{{ app.name }}.{{ node.split('.')[0] }}-node.ServerName={{ app.cluster_name }}-{{ node.split('.')[0] }};{% endfor %}'/>
    <data key='user.{{ app.name }}.clusterInfo' value='[{% for node in app.nodes %}{&quot;node&quot;: &quot;{{ node.split('.')[0] }}-node&quot;, &quot;name&quot;: &quot;{{ app.cluster_name }}-{{ node.split('.')[0] }}&quot;},{% endfor %}]'/>
{% endfor %}

    <data key='user.database.type' value='{{ __db_type }}'/>

    <!-- Specifies the database parameters for each application.-->
    <!-- The settings for the different database types are:-->
    <!-- DB2:-->
    <!-- dbType:DB2; -->
    <!-- Oracle:-->
    <!-- dbType:oracle; -->
    <!-- SqlServer:-->
    <!-- dbType:sqlserver; -->
    <!-- Specify the database parameters, including database connection properties, for each application. For example, shown below are the Activities database parameters:
    <data key='user.activities.dbHostName' value='example.ibm.com'/>
    <data key='user.activities.dbPort' value='50000'/>
    <data key='user.activities.jdbcLibraryPath' value='/opt/jdbc'/>
    <data key='user.activities.dbName' value='OPNACT'/>
    <data key='user.activities.dbUser' value='LCUSER'/>
    <data key='user.activities.dbUserPassword' value='password'/>
    <data key='user.activities.dbType' value='DB2'/> -->

{% for db in __cnx_db_info_results.results %}
    <data key='user.{{ db.item.app }}.dbType' value='{{ db.item.type }}'/>
    <data key='user.{{ db.item.app }}.jdbcLibraryPath' value='{{ db.item.jdbc_file }}'/>
    <data key='user.{{ db.item.app }}.dbHostName' value='{{ db.item.server }}'/>
    <data key='user.{{ db.item.app }}.dbPort' value='{{ db.item.port }}'/>
    <data key='user.{{ db.item.app }}.dbName' value='{{ db.item.name }}'/>
    <data key='user.{{ db.item.app }}.dbUser' value='{{ db.item.user }}'/>
    <data key='user.{{ db.item.app }}.dbUserPassword' value='{{ db.stdout | trim }}'/>
{% endfor %}
{% if ccm_install is defined %}
    <data key='user.ccm.gcd.dbHostName' value='{{ db.item.server }}'/>
    <data key='user.ccm.gcd.dbPort' value='{{ db.item.port }}'/>
    <data key='user.ccm.gcd.dbName' value='{{ db.item.name }}'/>
    <data key='user.ccm.gcd.dbUser' value='{{ db.item.user }}'/>
    <data key='user.ccm.gcd.dbUserPassword' value='{{ db.stdout | trim}}'/>
    <data key='user.ccm.objstore.dbHostName' value='{{ db.item.server }}'/>
    <data key='user.ccm.objstore.dbPort' value='{{ db.item.port }}'/>
    <data key='user.ccm.objstore.dbName' value='{{ db.item.name }}'/>
    <data key='user.ccm.objstore.dbUser' value='{{ db.item.user }}'/>
    <data key='user.ccm.objstore.dbUserPassword' value='db.stdout | trim'/>
{% endif %}

    <data key='user.web.server.name' value='{{ __cnx_webserver }}'/>
    <data key='user.web.server.node' value='{{ __cnx_webserver }}-node'/>

    <data key='user.contentStore.local.path' value='{{ __cnx_install_location }}/data/local'/>
    <data key='user.contentStore.shared.path' value='{{ __cnx_shared_area }}'/>
    <data key='user.contentStore.shared.path.configproperties' value='{{ __cnx_shared_area }}/ccm'/>

    <data key='user.messageStore.shared.path' value='{{ __cnx_message_store }}'/>
    <data key='user.connections.install.location' value='{{ __cnx_install_location }}'/>
    <data key='user.connections.install.location.win32format' value='{{ __cnx_install_location }}'/>

{% if ccm_install is defined %}
    <data key='user.ce.install.location' value='{{ __cnx_install_location }}/FileNet/ContentEngine'/>
    <data key='user.ceclient.install.location' value='{{ __cnx_install_location }}/FileNet/CEClient'/>
    <data key='user.fncs.install.location' value='{{ __cnx_install_location }}/FNCS'/>
{% endif %}

    <data key='user.notification.replyto.enabled' value='false'/>

    <data key='user.user.mapping.administrative.users' value='{{ connections_admin }}'/>
{% if global_moderator is defined %}
    <data key='user.user.mapping.global.moderater.users' value='{{ global_moderator }}'/>
{% endif %}

  </profile>

  <install>
    <!-- IBM Connections 7.0.0.1 -->
    {% if cnx_updates_enabled is not defined %}
    <offering profile='HCL Connections' id='com.ibm.connections' version='{{ __this_version }}' features='main,common,files,homepage,news,pushNotification,search,rte,widgetContainer,activities,blogs,dogear,communities,forums,metrics,mobile,moderation,profiles,wikis,icec,ic360{% if ccm_install is defined %},ccm{% endif %}'/>
    {% else %}
    <offering profile='HCL Connections' id='com.ibm.connections' version='{{ cnx_upgrade_version.stdout }}' features='main,common,files,homepage,news,pushNotification,search,rte,widgetContainer,activities,blogs,dogear,communities,forums,metrics,mobile,moderation,profiles,wikis,icec,ic360{% if ccm_install is defined %},ccm{% endif %}'/>
    {% endif %}
  </install>
  <preference name='com.ibm.cic.common.core.preferences.eclipseCache' value='${sharedLocation}'/>
</agent-input>
