---
- name:                       Register current db2 version
  shell:                      runuser -l "{{ __db2_user }}" -c 'db2level' | grep "DB2 v" | cut -d'"' -f 2
  register:                   db2_installed_version
  ignore_errors:              true
  delegate_to:               "{{ item }}"
  with_items:
   - "{{ groups['db2_servers'] }}"

- debug:
    msg:                      "Installed DB2 version is {{ db2_installed_version.results[0].stdout_lines }}"
  delegate_to:               "{{ item }}"
  with_items:
   - "{{ groups['db2_servers'] }}"

- name:                       "Check if existing DB2 installed version is same as expected one to be installed"
  shell:                      grep -iq {{ __install_version_db2 }} <<< {{ db2_installed_version.results[0].stdout_lines }} && echo "true" || echo "false"
  register:                   db2_version_match
  ignore_errors:              true
  delegate_to:               "{{ item }}"
  with_items:
   - "{{ groups['db2_servers'] }}"

- name:                       "Reset DB2 variables as execution skips expected DB2 {{ __install_version_db2 }} and continue with the already installed {{ db2_installed_version.results[0].stdout_lines }}"
  set_fact:
    __db2_default_install_path:   "/opt/IBM/db2/V11.1"
  delegate_to: "{{ item }}"
  with_items: "{{ play_hosts }}"
  run_once: yes
  when:
    - db2_version_match.results[0].stdout == "false"
    - db2_installed_version is search("11.1")

- name:                       "Reset DB2 variables as execution skips expected DB2 {{ __install_version_db2 }} and continue with the already installed {{ db2_installed_version.results[0].stdout_lines }}"
  set_fact:
    __db2_default_install_path:   "/opt/IBM/db2/V11.5"
  delegate_to: "{{ item }}"
  with_items: "{{ play_hosts }}"
  run_once: yes
  when:
    - db2_version_match.results[0].stdout == "false"
    - db2_installed_version is search("11.5")
