- name:                      Check Helm Version
  shell:                     helm version -c|awk -F "," '{print $1}'|awk -F ":" '{print $3}'|awk -F "." '{print $1}'|sed "s/\"//g"
  changed_when:              true
  register:                  helm_version
  become_user:               "{{ __sudo_user }}"
  ignore_errors:             true

- debug: var=helm_version.stdout

- name:                      Check if bootstrap can be deleted after all with Helm
  shell:                     "helm ls --namespace {{ __default_namespace }} | grep bootstrap" 
  changed_when:              true
  register:                  bootstrap_already_provisioned
  become_user:               "{{ __sudo_user }}"
  ignore_errors:             true

- name:                      Delete bootstrap if already exists - Helm v2
  command:                   helm del --purge bootstrap
  when:
   - bootstrap_already_provisioned.rc == 0
   - helm_version.stdout == "v2"
  become_user:               "{{ __sudo_user }}"

- name:                      Delete bootstrap if already exists - Helm v3
  command:                   "helm uninstall bootstrap --namespace {{ __default_namespace }}"
  when:
   - bootstrap_already_provisioned.rc == 0
   - helm_version.stdout != "v2"
  become_user:               "{{ __sudo_user }}"

- name:                      Give it some space after eventual cleanup
  pause:
    seconds:                 5
  when:
   - bootstrap_already_provisioned.rc == 0

- name:                      "Render {{ __bootstrap_install_env }}"
  template:
    src:                     "helmvars/bootstrap.yml.j2"
    dest:                    "{{ __bootstrap_install_env }}"
  become_user:               "{{ __sudo_user }}"

- name:                      Get chart and version
  shell:                     "helm search repo {{ __helm_repository_local_name }} {{ __helm_repo_flag }} | grep bootstrap | awk {'print $2'}"
  register:                  bootstrap_chart_version
  become_user:               "{{ __sudo_user }}"

- name:                      Found bootstrap chart version
  debug:
    msg:                     "{{ bootstrap_chart_version.stdout }}"

- name:                      Upgrade bootstrap
  command:                   "helm upgrade bootstrap {{ __helm_repository_local_name }}/bootstrap -i --version {{ bootstrap_chart_version.stdout }} -f {{ __bootstrap_install_env }} --namespace {{ __default_namespace }} --wait"
  become_user:               "{{ __sudo_user }}"

- name:                      Wait for bootstrap to come up
  shell:                     kubectl wait --namespace {{ __default_namespace }} --for=condition=complete job/bootstrap --timeout=300s
  become_user:               "{{ __sudo_user }}"

- name:                      Get bootstrap POD name
  shell:                     kubectl get pods -n {{ __default_namespace }} | grep bootstrap | grep Completed | awk {'print $1'}  
  changed_when:              true
  register:                  bootstrap_successful
  become_user:               "{{ __sudo_user }}"
  ignore_errors:             true

- name:                      Bootstrap's pod name is
  debug:
    msg:                     "{{ bootstrap_successful.stdout }}"

- name:                      Check if pod {{ bootstrap_successful.stdout }} completed successfully
  shell:                     kubectl logs {{ bootstrap_successful.stdout }} -n {{ __default_namespace }} | grep "Environment setup successfully complete"
  changed_when:              true
  register:                  bootstrap_success_message
  become_user:               "{{ __sudo_user }}"

- name:                      Bootstrap succeed
  debug: 
    msg:                     "{{ bootstrap_success_message.stdout }}"
