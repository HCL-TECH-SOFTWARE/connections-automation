---
- name:               Verify if Docs Conversion is already installed on the first node
  stat:
    path:             "{{ __conversion_install_success_file }}"
  register:           conversion_first_already_installed
  delegate_to:        "{{ groups['conversion_servers'][0] }}"

- name:               Verify if Docs Conversion is already installed on subsequent node
  stat:
    path:             "{{ __conversion_install_success_file }}"
  register:           conversion_current_node_already_installed

- debug:               var=conversion_first_already_installed.stat.exists
  run_once:            true

- debug:               var=conversion_current_node_already_installed.stat.exists
  run_once:            true

# cfg.properties and cfg.node.properties content are the same so omit copying unlike install_docs_editor_sec_node.yml
- name:                Edit cfg.node.properties
  lineinfile:
    path:              "{{ __conversion_cfg_prop_location }}/cfg.node.properties"
    regex:             "{{ item.prop_name }}"
    line:              "{{ item.prop_value }}"
    state:             present
  with_items:
    - { prop_name: "{{ __conversion_install_root }}", prop_value: "{{ __conversion_install_root_r }}" }
    - { prop_name: "{{ __docs_shared_storage_type }}", prop_value: "{{ __docs_shared_storage_type_r }}" }
    - { prop_name: "{{ __viewer_shared_storage_type }}", prop_value: "{{ __viewer_shared_storage_type_r }}" }
    - { prop_name: "{{ __docs_shared_storage_local_path }}", prop_value: "{{ __docs_shared_storage_local_path_r }}" }
    - { prop_name: "{{ __docs_shared_storage_remote_server }}", prop_value: "{{ __docs_shared_storage_remote_server_r }}" }
    - { prop_name: "{{ __docs_shared_storage_remote_path }}", prop_value: "{{ __docs_shared_storage_remote_path_r }}" }
    - { prop_name: "{{ __viewer_shared_storage_local_path }}", prop_value: "{{ __viewer_shared_storage_local_path_r }}" }
    - { prop_name: "{{ __viewer_shared_storage_remote_server }}", prop_value: "{{ __viewer_shared_storage_remote_server_r }}" }
    - { prop_name: "{{ __viewer_shared_storage_remote_path }}", prop_value: "{{ __viewer_shared_storage_remote_path_r }}" }
    - { prop_name: "{{ __scope }}", prop_value: "{{ __scope_r  }}" }
    - { prop_name: "{{ __scope_name }}", prop_value: "{{ __scope_name_r  }}" }
    - { prop_name: "{{ __was_install_root }}", prop_value: "{{ __was_install_root_r }}" }
    - { prop_name: "{{ __non_job_mgr_mode }}", prop_value: "{{ __non_job_mgr_mode_r }}" }
    - { prop_name: "{{ __viewer_url }}", prop_value: "{{ __viewer_url_r }}" }
  when:               not conversion_current_node_already_installed.stat.exists

- name:              Run the Docs Conversion installer for the second node
  shell:
    chdir:           "{{ __extraction_folder }}/DocsConversion/installer"
    cmd:             "./install_node.sh -wasadminID {{ was_username }} -wasadminPW {{ was_password }} -configFile cfg.node.properties -acceptLicense -silentlyInstall"
  become:            true
  when:
    - not conversion_current_node_already_installed.stat.exists
    - conversion_first_already_installed.stat.exists |bool
  register:          sec_install_performed

- name:              Search for success message in install log
  become:            yes
  shell:             "grep -i '{{ __install_success_message_node }}' {{ __docs_conversion_install_location }}/logs/conversion_install_node.log"
  register:          conversion_success_message_found
  failed_when:       conversion_success_message_found.stdout|length == 0
  when:              sec_install_performed is not skipped

- name:              "Create {{ __conversion_install_success_file }} file"
  file:
    path:            "{{ __conversion_install_success_file }}"
    state:           touch
  when:              sec_install_performed is not skipped and conversion_success_message_found.stdout|length > 0
