- name:                  "Delete {{ __docs_success_file }} file"
  file:
    path:                "{{ __docs_success_file }}"
    state:               absent
  when:
    - __cnx_docs_force_repopulation |bool

- name:                 "Verify if Docs database was already created"
  stat:
    path:                "{{ __docs_success_file }}"
  register:              docs_database_already_created

- name:                  Clean up installation folder(s)
  file:
    path:                "{{ __docs_extraction_folder }}"
    state:               absent
  when:
    - not docs_database_already_created.stat.exists

- name:                  Create installation folder
  file:
    path:                "{{ __docs_extraction_folder }}"
    state:               directory
  when:
    - not docs_database_already_created.stat.exists

- name:                  Download and unzip installation {{ __docs_package_name }} to the {{ __docs_extraction_folder }}
  unarchive:
    src:                 "{{ __docs_download_location }}/{{ __docs_package_name }}"
    dest:                "{{ __docs_extraction_folder }}"
    remote_src:          yes
    validate_certs:      false
  when:
    - not docs_database_already_created.stat.exists

- name:                  Cleanup Docs database
  shell:                 "chdir={{ __docs_installation_folder }}/db2 sh {{ item }}"
  become_user:           "{{ __db2_user }}"
  environment:
    DB2INSTANCE:         "{{ __db2_user }}"
    IBM_DB_LIB:          "{{ __db2_instance_homedir }}/sqllib/lib"
    IBM_DB_DIR:          "{{ __db2_instance_homedir }}/sqllib"
    LD_LIBRARY_PATH:     "{{ __db2_instance_homedir }}/sqllib/lib64:{{ __db2_instance_homedir }}/sqllib/lib64/gskit:{{ __db2_instance_homedir }}/sqllib/lib32"
    IBM_DB_INCLUDE:      "{{ __db2_instance_homedir }}/sqllib/include"
    DB2LIB:              "{{ __db2_instance_homedir }}/sqllib/lib"
    DB2_HOME:            "{{ __db2_instance_homedir }}/sqllib"
    PATH:                "/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:{{ __db2_instance_homedir }}/sqllib/bin:{{ __db2_instance_homedir }}/sqllib/adm:{{ __db2_instance_homedir }}/sqllib/misc:{{ __db2_instance_homedir }}/sqllib/gskit/bin:{{ __db2_instance_homedir }}/.local/bin:{{ __db2_instance_homedir }}/bin"
  with_items:
   - "dropDb.sh"
  when:
    - __cnx_docs_force_repopulation |bool
  ignore_errors:         yes

- name:                 "Verify if should proceed with creation if cleanup was done"
  stat:
    path:                "{{ __docs_success_file }}"
  register:              docs_database_already_created

- name:                  Create Docs database and update schema
  shell:                 "chdir={{ __docs_installation_folder }}/db2 sh {{ item }}"
  become_user:           "{{ __db2_user }}"
  environment:
    DB2INSTANCE:         "{{ __db2_user }}"
    IBM_DB_LIB:          "{{ __db2_instance_homedir }}/sqllib/lib"
    IBM_DB_DIR:          "{{ __db2_instance_homedir }}/sqllib"
    LD_LIBRARY_PATH:     "{{ __db2_instance_homedir }}/sqllib/lib64:{{ __db2_instance_homedir }}/sqllib/lib64/gskit:{{ __db2_instance_homedir }}/sqllib/lib32"
    IBM_DB_INCLUDE:      "{{ __db2_instance_homedir }}/sqllib/include"
    DB2LIB:              "{{ __db2_instance_homedir }}/sqllib/lib"
    DB2_HOME:            "{{ __db2_instance_homedir }}/sqllib"
    PATH:                "/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:{{ __db2_instance_homedir }}/sqllib/bin:{{ __db2_instance_homedir }}/sqllib/adm:{{ __db2_instance_homedir }}/sqllib/misc:{{ __db2_instance_homedir }}/sqllib/gskit/bin:{{ __db2_instance_homedir }}/.local/bin:{{ __db2_instance_homedir }}/bin"
  with_items:
   - "createDb.sh"
   - "updateDBSchema.sh"
  when:
    - not docs_database_already_created.stat.exists
  register:              docs_database_created

- name:                  Run appGrants.sql
  shell:                 "{{ __db2_migration_cmd }} {{ __docs_installation_folder }}/db2/{{ item }}"
  register:              result
  failed_when:           ( result.rc not in [0, 1, 2, 3] )
  become_user:           "{{ __db2_user }}"
  environment:
    DB2INSTANCE:         "{{ __db2_user }}"
    IBM_DB_LIB:          "{{ __db2_instance_homedir }}/sqllib/lib"
    IBM_DB_DIR:          "{{ __db2_instance_homedir }}/sqllib"
    LD_LIBRARY_PATH:     "{{ __db2_instance_homedir }}/sqllib/lib64:{{ __db2_instance_homedir }}/sqllib/lib64/gskit:{{ __db2_instance_homedir }}/sqllib/lib32"
    IBM_DB_INCLUDE:      "{{ __db2_instance_homedir }}/sqllib/include"
    DB2LIB:              "{{ __db2_instance_homedir }}/sqllib/lib"
    DB2_HOME:            "{{ __db2_instance_homedir }}/sqllib"
    PATH:                "/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:{{ __db2_instance_homedir }}/sqllib/bin:{{ __db2_instance_homedir }}/sqllib/adm:{{ __db2_instance_homedir }}/sqllib/misc:{{ __db2_instance_homedir }}/sqllib/gskit/bin:{{ __db2_instance_homedir }}/.local/bin:{{ __db2_instance_homedir }}/bin"
  with_items:
   - "appGrants.sql"
  when:
    - not docs_database_already_created.stat.exists

- name:                  "Create {{ __docs_success_file }} file"
  file:
    path:                "{{ __docs_success_file }}"
    state:               touch
  when:                  docs_database_created is not skipped
