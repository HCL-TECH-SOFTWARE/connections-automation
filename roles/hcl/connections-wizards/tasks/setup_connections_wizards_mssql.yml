- name:                  "Verify if migrations are already done"
  stat:
    path:                "{{ __sql_success_file }}"
  register:              migrations_already_done

- name:                  Clean up installation folder(s)
  file:
    path:                "{{ __db_extraction_folder }}"
    state:               absent
  when:
    - (not migrations_already_done.stat.exists) or (__cnx_force_repopulation |bool )

- name:                  Create installation folder
  file:
    path:                "{{ __db_extraction_folder }}"
    state:               directory
  when:
    - (not migrations_already_done.stat.exists) or (__cnx_force_repopulation |bool )


- name:                  Download and unzip installation "{{ __download_location}}/{{ __package_name }}" to the {{ __db_extraction_folder }}
  unarchive:
    src:                 "{{ __download_location }}/{{ __package_name }}"
    dest:                "{{ __db_extraction_folder }}"
    remote_src:          yes
  when:
    - (not migrations_already_done.stat.exists) or (__cnx_force_repopulation |bool) or (__db_enable_upgrades |bool)
  retries:               3

- name:                  Disable fingerprinting
  command:               authconfig --disablefingerprint --update
  when:
    - not migrations_already_done.stat.exists

- name:                  Stop CNX cluster for database cleanup
  include_role:
    name:                roles/third_party/ibm/wasnd/was-dmgr-stop-cluster
    apply:
      delegate_to:       "{{ dmgr_hostname }}"
      become:            true
      ignore_errors:     yes
  when:                  __cnx_force_repopulation |bool

- name:                  Cleanup Databases
  shell:                 "{{ __sql_migration_cmd }} {{ __installation_folder }}/{{ item }} {{ __sql_migration_cmd_args }}"
  register:              all_migrations_result
  failed_when:           ( all_migrations_result.rc not in [0] )
  environment:
    PATH:                "PATH=/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/opt/mssql/bin:/opt/mssql-tools/bin:/home/vagrant/.local/bin:/home/vagrant/bin:/opt/mssql/bin:/opt/mssql-tools/bin"
  with_items:
   - "connections.sql/activities/sqlserver/dropDb.sql"
   - "connections.sql/blogs/sqlserver/dropDb.sql"
   - "connections.sql/dogear/sqlserver/dropDb.sql"
   - "connections.sql/communities/sqlserver/dropDb.sql"
   - "connections.sql/files/sqlserver/dropDb.sql"
   - "connections.sql/forum/sqlserver/dropDb.sql"
   - "connections.sql/homepage/sqlserver/dropDb.sql"
   - "connections.sql/metrics/sqlserver/dropDb.sql"
   - "connections.sql/mobile/sqlserver/dropDb.sql"
   - "connections.sql/profiles/sqlserver/dropDb.sql"
   - "connections.sql/pushnotification/sqlserver/dropDb.sql"
   - "connections.sql/wikis/sqlserver/dropDb.sql"
   - "connections.sql/library.gcd/sqlserver/dropDb.sql"
   - "connections.sql/library.os/sqlserver/dropDb.sql"
  when:
    - __cnx_force_repopulation |bool
  ignore_errors:         yes


- name:                  Cleanup IC360 database
  shell:                 "{{ __sql_migration_cmd }} {{ __installation_folder }}/{{ item }} {{ __sql_migration_cmd_args }}"
  register:              all_migrations_result
  failed_when:           ( all_migrations_result.rc not in [0] )
  environment:
    PATH:                "PATH=/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/opt/mssql/bin:/opt/mssql-tools/bin:/home/vagrant/.local/bin:/home/vagrant/bin:/opt/mssql/bin:/opt/mssql-tools/bin"
  with_items:
   - "connections.sql/ic360/sqlserver/dropDb.sql"
  when:
    - __cnx_force_repopulation |bool
    - __db_version == '7.0'
  ignore_errors:         yes

- name:                  Clenaup ICEC database only
  shell:                 "{{ __sql_migration_cmd }} {{ __installation_folder }}/{{ item }} {{ __sql_migration_cmd_args }}"
  register:              all_migrations_result
  failed_when:           ( all_migrations_result.rc not in [0] )
  environment:
    PATH:                "PATH=/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/opt/mssql/bin:/opt/mssql-tools/bin:/home/vagrant/.local/bin:/home/vagrant/bin:/opt/mssql/bin:/opt/mssql-tools/bin"
  with_items:
   - "connections.sql/icec/sqlserver/dropDb.sql"
  when:
    - __cnx_force_repopulation |bool
  ignore_errors:         yes

- name:                  "Delete {{ __sql_success_file }} file"
  file:
    path:                "{{ item }}"
    state:               absent
  with_items:
    - "{{ __sql_success_file }}"
    - "{{ __sql_ic360_success_file }}"
    - "{{ __sql_sharepoint_success_file }}"
  when:
    - __cnx_force_repopulation |bool

- name:                  "Verify if should proceed with migrations if cleanup was done"
  stat:
    path:                "{{ __sql_success_file }}"
  register:              migrations_already_done

- name:                  Run migrations for everything but ICEC
  shell:                 "{{ __sql_migration_cmd }} {{ __installation_folder }}/{{ item }} {{ __sql_migration_cmd_args }}"
  register:              all_migrations_result
  failed_when:           ( all_migrations_result.rc not in [0] )
  environment:
    PATH:                "PATH=/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/opt/mssql/bin:/opt/mssql-tools/bin:/home/vagrant/.local/bin:/home/vagrant/bin:/opt/mssql/bin:/opt/mssql-tools/bin"
  with_items:
   - "connections.sql/activities/sqlserver/createDb.sql"
   - "connections.sql/activities/sqlserver/appGrants.sql"
   - "connections.sql/blogs/sqlserver/createDb.sql"
   - "connections.sql/blogs/sqlserver/appGrants.sql"
   - "connections.sql/dogear/sqlserver/createDB.sql"
   - "connections.sql/dogear/sqlserver/appGrants.sql"
   - "connections.sql/communities/sqlserver/createDb.sql"
   - "connections.sql/communities/sqlserver/appGrants.sql"
   - "connections.sql/communities/sqlserver/calendar-createDb.sql"
   - "connections.sql/communities/sqlserver/calendar-appGrants.sql"
   - "connections.sql/files/sqlserver/createDb.sql"
   - "connections.sql/files/sqlserver/appGrants.sql"
   - "connections.sql/forum/sqlserver/createDb.sql"
   - "connections.sql/forum/sqlserver/appGrants.sql"
   - "connections.sql/homepage/sqlserver/createDb.sql"
   - "connections.sql/homepage/sqlserver/appGrants.sql"
   - "connections.sql/homepage/sqlserver/initData.sql"
   - "connections.sql/metrics/sqlserver/createDb.sql"
   - "connections.sql/metrics/sqlserver/appGrants.sql"
   - "connections.sql/mobile/sqlserver/createDb.sql"
   - "connections.sql/mobile/sqlserver/appGrants.sql"
   - "connections.sql/profiles/sqlserver/createDb.sql"
   - "connections.sql/profiles/sqlserver/appGrants.sql"
   - "connections.sql/pushnotification/sqlserver/createDb.sql"
   - "connections.sql/pushnotification/sqlserver/appGrants.sql"
   - "connections.sql/wikis/sqlserver/createDb.sql"
   - "connections.sql/wikis/sqlserver/appGrants.sql"
   - "connections.sql/library.gcd/sqlserver/appGrants.sql"
   - "connections.sql/library.os/sqlserver/appGrants.sql"
  when:
    - not migrations_already_done.stat.exists

- name:                  "Verify if Sharepoint migration has already run"
  stat:
    path:                "{{ __sql_sharepoint_success_file }}"
  register:              sharepoint_migrations_already_done

- name:                  Run Sharepoint migration for Connections 7
  shell:                 "{{ __sql_migration_cmd }} {{ __installation_folder }}/{{ item }} {{ __sql_migration_cmd_args }}"
  register:              all_migrations_result
  failed_when:           ( all_migrations_result.rc not in [0] )
  environment:
    PATH:                "PATH=/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/opt/mssql/bin:/opt/mssql-tools/bin:/home/vagrant/.local/bin:/home/vagrant/bin:/opt/mssql/bin:/opt/mssql-tools/bin"
  with_items:
   - "connections.sql/homepage/sqlserver/upgrade-60CR4-70.sql"
  when:
    - not sharepoint_migrations_already_done.stat.exists
    - __db_version == '7.0'
    - __db_enable_upgrades |bool

- name:                  "Verify if IC360 DB is already created"
  stat:
    path:                "{{ __sql_ic360_success_file }}"
  register:              ic360_migrations_already_done

- name:                  Run migrations for IC360
  shell:                 "{{ __sql_migration_cmd }} {{ __installation_folder }}/{{ item }} {{ __sql_migration_cmd_args }}"
  register:              all_migrations_result
  failed_when:           ( all_migrations_result.rc not in [0] )
  environment:
    PATH:                "PATH=/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/opt/mssql/bin:/opt/mssql-tools/bin:/home/vagrant/.local/bin:/home/vagrant/bin:/opt/mssql/bin:/opt/mssql-tools/bin"
  with_items:
   - "connections.sql/ic360/sqlserver/createDb.sql"
   - "connections.sql/ic360/sqlserver/appGrants.sql"
  when:
    - __db_version == '7.0'
    - not ic360_migrations_already_done.stat.exists

- name:                  Run migrations for ICEC only
  shell:                 "{{ __sql_migration_cmd }} {{ __installation_folder }}/{{ item }} {{ __sql_migration_cmd_args }}"
  register:              all_migrations_result
  failed_when:           ( all_migrations_result.rc not in [0] )
  environment:
    PATH:                "PATH=/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/opt/mssql/bin:/opt/mssql-tools/bin:/home/vagrant/.local/bin:/home/vagrant/bin:/opt/mssql/bin:/opt/mssql-tools/bin"
  with_items:
   - "connections.sql/icec/sqlserver/createDb.sql"
   - "connections.sql/icec/sqlserver/appGrants.sql"
  when:
    - not migrations_already_done.stat.exists

- name:                  "Create {{ __sql_success_file }} file"
  file:
    path:                "{{ __sql_success_file }}"
    state:               touch
  when:
   - all_migrations_result is defined
   - not migrations_already_done.stat.exists

- name:                  "Create {{ __sql_ic360_success_file }} file"
  file:
    path:                "{{ __sql_ic360_success_file }}"
    state:               touch
  when:
   - ic360_migration_result is defined
   - not ic360_migrations_already_done.stat.exists

- name:                  "Create {{ __sql_sharepoint_success_file }} file"
  file:
    path:                "{{ __sql_sharepoint_success_file }}"
    state:               touch
  when:
   - sharepoint_migration_result is defined
   - not sharepoint_migrations_already_done.stat.exists
