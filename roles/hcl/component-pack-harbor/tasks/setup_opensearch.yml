- name:                     Avoid issues with 'out of virtual memory' exceptions as per documentation
  sysctl:
    name:                    "vm.max_map_count"
    value:                   '262144'
    sysctl_set:              yes
    reload:                  yes
  delegate_to:               "{{ item }}"
  with_items:
   - "{{ groups['k8s_workers'] }}"

- name:                      Avoid issues with 'out of file descriptors' exceptions as per documentation
  sysctl:
    name:                    "fs.file-max"
    value:                   '65536'
    sysctl_set:              yes
    reload:                  yes
  delegate_to:               "{{ item }}"
  with_items:
   - "{{ groups['k8s_workers'] }}"

- name:                      Get number of kubernetes workers for auto scalling opensearch pods
  set_fact:
     count_workers:          "{{ groups['k8s_workers'] | length }}"
  when:                      __enable_pod_auto_scaling |bool

- name:                      Set OpenSearch replica count to the number of kubernetes worker nodes ({{ count_workers }}) for auto scalling opensearch pods
  set_fact:
     opensearch_replicaset:  "{{ count_workers }}"
     __opensearch_replica_count:    "{{ count_workers }}"
  when:                      __enable_pod_auto_scaling |bool

- name:                      "Render {{ __opensearch_master_env }}"
  template:
    src:                     "helmvars/opensearch_master.yml.j2"
    dest:                    "{{ __opensearch_master_env }}"
  become_user:               "{{ __sudo_user }}"

- name:                      "Render {{ __opensearch_data_env }}"
  template:
    src:                     "helmvars/opensearch_data.yml.j2"
    dest:                    "{{ __opensearch_data_env }}"
  become_user:               "{{ __sudo_user }}"

- name:                      "Render {{ __opensearch_client_env }}"
  template:
    src:                     "helmvars/opensearch_client.yml.j2"
    dest:                    "{{ __opensearch_client_env }}"
  become_user:               "{{ __sudo_user }}"

- name:                      Get chart and version
  shell:                     "cat {{ __ansible_cache_charts }}/helm_repo_version_list | grep opensearch | grep -vE \"opensearch-\" | grep -vE opensearchstack | cut -d ':' -f2"
  register:                  opensearch_chart_version
  become_user:               "{{ __sudo_user }}"

- name:                      Found opensearch chart version
  debug:
    msg:                     "{{ opensearch_chart_version.stdout }}"

- name:                      Record opensearch chart version
  local_action:
    module:                  shell
    cmd:                     echo "opensearch chart = {{ opensearch_chart_version.stdout }}" >> "{{ __cp_versions_file }}"
  become:                    false
  when:                      __record_cp_versions|bool

- name:                      Upgrade opensearch master
  command:                   "helm upgrade opensearch-master {{ __helm_repository_local_name }}/opensearch -i --version {{ opensearch_chart_version.stdout }} -f {{ __opensearch_master_env }} --namespace {{ __default_namespace }} --set common.probe.readinessProbe.timeoutSeconds=60 --wait --timeout 10m"
  become_user:               "{{ __sudo_user }}"

- name:                      Upgrade opensearch data
  command:                   "helm upgrade opensearch-data {{ __helm_repository_local_name }}/opensearch -i --version {{ opensearch_chart_version.stdout }} -f {{ __opensearch_data_env }} --namespace {{ __default_namespace }} --set common.probe.readinessProbe.timeoutSeconds=60 --wait --timeout 10m"
  become_user:               "{{ __sudo_user }}"

- name:                      Wait for OpenSearch master to get ready and accept requests
  shell:                     kubectl exec {{ __opensearch_cluster_name }}-master-0 -n "{{ __default_namespace }}" -- bash -c "/usr/share/opensearch/probe/sendRequest.sh GET /_cluster/health"
  become_user:               "{{ __sudo_user }}"
  register: cluster_readiness
  until: cluster_readiness.stdout is search(__opensearch_cluster_name)
  retries: 3
  delay: 30

- name:                       Creating a shell script file for changing opensearch disk watermark settings
  copy:
    dest:                     "~/opensearch-disk-watermark.sh"
    content: |
        kubectl exec {{ __opensearch_cluster_name }}-master-0 -n "{{ __default_namespace }}" -- bash -c "/usr/share/opensearch/probe/sendRequest.sh PUT '/_cluster/settings' -H 'Content-Type: application/json' -d '{\"transient\" : {\"cluster.routing.allocation.disk.watermark.flood_stage\" : \"{{ opensearch_watermark_flood_stage | default(95) | int }}%\",\"cluster.routing.allocation.disk.watermark.high\" : \"{{ opensearch_watermark_high | default(90) | int }}%\",\"cluster.routing.allocation.disk.watermark.low\" : \"{{ opensearch_watermark_low | default(85) | int }}%\"}}'"
  become_user:               "{{ __sudo_user }}"
  when:
  - (opensearch_watermark_low is defined) or (opensearch_watermark_high is defined) or (opensearch_watermark_low is defined)

- name:                      Changing permission of "~/opensearch-disk-watermark.sh", adding "+x"
  file:                      dest=~/opensearch-disk-watermark.sh mode=a+x
  become_user:               "{{ __sudo_user }}"
  when:
  - (opensearch_watermark_low is defined) or (opensearch_watermark_high is defined) or (opensearch_watermark_low is defined)

- name:                      Execute the script to change opensearch disk watermark settings
  command:                   sh ~/opensearch-disk-watermark.sh
  become_user:               "{{ __sudo_user }}"
  when:
  - (opensearch_watermark_low is defined) or (opensearch_watermark_high is defined) or (opensearch_watermark_low is defined)

- name:                      Delete opensearch disk watermark settings shell script file
  file:
    path:                    "~/opensearch-disk-watermark.sh"
    state:                   absent
  become_user:               "{{ __sudo_user }}"
  when:
  - (opensearch_watermark_low is defined) or (opensearch_watermark_high is defined) or (opensearch_watermark_low is defined)

- name:                      Upgrade opensearch client
  command:                   "helm upgrade opensearch-client {{ __helm_repository_local_name }}/opensearch -i --version {{ opensearch_chart_version.stdout }} -f {{ __opensearch_client_env }} --namespace {{ __default_namespace }} --set common.probe.readinessProbe.timeoutSeconds=60 --wait --timeout 10m"
  become_user:               "{{ __sudo_user }}"

- name:                      Check if opensearch master is up and running
  shell:                     kubectl get pods -n {{ __default_namespace }} | grep -i {{ __opensearch_cluster_name }}-master | grep -i Running
  when:                      not __skip_pod_checks |bool
  become_user:               "{{ __sudo_user }}"

- name:                      Check if opensearch data is up and running
  shell:                     kubectl get pods -n {{ __default_namespace }} | grep -i {{ __opensearch_cluster_name }}-data | grep -i Running
  when:                      not __skip_pod_checks |bool
  become_user:               "{{ __sudo_user }}"

- name:                      Check if opensearch client is up and running
  shell:                     kubectl get pods -n {{ __default_namespace }} | grep -i {{ __opensearch_cluster_name }}-client | grep -i Running
  when:                      not __skip_pod_checks |bool
  become_user:               "{{ __sudo_user }}"

- name:                      Remove Master eligible nodes using voting configuration to support scaling down
  shell:                     kubectl exec {{ __opensearch_cluster_name }}-master-0 -n "{{ __default_namespace }}" -- bash -c "/usr/share/opensearch/probe/sendRequest.sh POST '/_cluster/voting_config_exclusions?node_names={{ __opensearch_cluster_name }}-master-1,{{ __opensearch_cluster_name }}-master-2'"
  become_user:               "{{ __sudo_user }}"
