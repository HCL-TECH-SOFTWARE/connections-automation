- name:               Verify if Docs Editor Extension is already installed
  stat:
    path:             "{{ __docs_editor_ext_install_success_file }}"
  register:           editor_ext_already_installed

- name:               Edit cfg.properties
  lineinfile:
    path:            "{{ __editor_ext_cfg_prop_location }}/cfg.properties"
    regex:           "{{ item.prop_name }}"
    line:            "{{ item.prop_value }}"
    state:           present
    create:          yes
  with_items:
    - { prop_name: "{{ __ext_install_root }}", prop_value: "{{ __editor_ext_install_root_r }}" }
    - { prop_name: "{{ __was_install_root }}", prop_value: "{{ __was_install_root_r }}" }
    - { prop_name: "{{ __ic_extension_path }}", prop_value: "{{ __ic_extension_path_r }}" }
    - { prop_name: "{{ __deamon_shared_path }}", prop_value: "{{ __deamon_shared_path_r }}" }
    - { prop_name: "{{ __files_scope_name }}", prop_value: "{{ __files_scope_name_r }}" }
    - { prop_name: "{{ __news_scope_name }}", prop_value: "{{ __news_scope_name_r }}" }
    - { prop_name: "{{ __common_scope_name }}", prop_value: "{{ __common_scope_name_r }}" }
    - { prop_name: "{{ __docs_server_url }}", prop_value: "{{ __docs_server_url_r  }}" }
    - { prop_name: "{{ __ic_version }}", prop_value: "{{ __ic_version_r }}" }
    - { prop_name: "{{ __docs_admin_j2c_alias }}", prop_value: "{{ __docs_admin_j2c_alias_r }}" }
    - { prop_name: "{{ __auth_type }}", prop_value: "{{ __auth_type_r }}" }
    - { prop_name: "{{ __ccm_enabled }}", prop_value: "{{ __ccm_enabled_r }}" }
  when:
    - not editor_ext_already_installed.stat.exists

# Note: Documentation says it can be installed on one of the HCL Connections server
- name:              Run the Docs Editor Extension installer
  shell:
    chdir:           "{{ __extraction_folder }}/DocsCnxExtension/installer"
    cmd:             "./install.sh -wasadminID {{ was_username }} -wasadminPW {{ was_password }} -acceptLicense -silentlyInstall"
  become:            true
  when:
    - not editor_ext_already_installed.stat.exists
  register:          sec_install_performed

- name:              Search for success message in install log
  become:            yes
  shell:             "grep -i '{{ __install_success_message }}' {{ __docs_editor_ext_install_location }}/logs/icext_install.log"
  register:          editor_ext_success_message_found
  failed_when:       editor_ext_success_message_found.stdout|length == 0
  when:              sec_install_performed is not skipped

- name:              "Create {{ __docs_editor_ext_install_success_file }} file"
  file:
    path:            "{{ __docs_editor_ext_install_success_file }}"
    state:           touch
  when:              sec_install_performed is not skipped and editor_ext_success_message_found.stdout|length > 0
