---
- name:               Verify if AutoDeploy is already installed
  stat:
    path:             "{{ __autodeploy_install_success_file }}"
  register:           autodeploy_already_installed

- name:               Edit config.properties
  replace:
    path:             "{{ __tmp_dir }}/mt/install/config.properties"
    regexp:           "^(?!#){{ item.prop_name }}=(.*)$"
    replace:          "{{ item.prop_name }}={{ item.prop_value }}"
  with_items:
    - { prop_name: "DMGR_PROFILE", prop_value: "{{ __dmgr_profile_r }}" }
    - { prop_name: "DMGR_NAME", prop_value: "{{ __dmgrname_profile_r }}" }
    - { prop_name: "WAS_HOME", prop_value: "{{ __was_home_profile_r }}" }
    - { prop_name: "APPSRV_PROFILE", prop_value: "{{ __was_appsrv_profile_r }}" }
    - { prop_name: "IHS_HOME", prop_value: "{{ __ihs_home_r }}" }
    - { prop_name: "DMGR_SOAP_PORT", prop_value: "{{ __dmgrsoap_port_r }}" }
    - { prop_name: "CELL_NAME", prop_value: "{{ __cell_name_r }}" }
    - { prop_name: "WASADMIN_USER", prop_value: "{{ __wasadmin_user_r }}" }
    - { prop_name: "WASADMIN_PASSWORD", prop_value: "{{ __wasadmin_password_r }}" }
    - { prop_name: "CONNECTIONS_PATH", prop_value: "{{ __connections_path_r }}" }
    - { prop_name: "AUTODEPLOY_HOME", prop_value: "{{ __autodeploy_home_r }}" }
    - { prop_name: "AUTODEPLOY_AUTH_METHOD", prop_value: "{{ __autodeploy_auth_method_r }}" }
    - { prop_name: "AUTODEPLOY_AUTH", prop_value: "{{ __autodeploy_auth_r }}" }
    - { prop_name: "DB2_USER", prop_value: "{{ __db_user_r }}" }
    - { prop_name: "DB2_PASSWORD", prop_value: "{{ __db_password_r }}" }

- name:                Remove old rc file
  file:
    path:              "{{ __tmp_dir }}/mt/install/autodeploy_install.rc"
    state:             absent

- name:                Install AutoDeploy, log file {{ __tmp_dir }}/mt/install/autodeploy_install.log
  shell: |
     set timeout 3m
     ./autodeploy-install-cli.sh -s -f config.properties 2>&1 | tee autodeploy_install.log
     echo ${PIPESTATUS[0]} > autodeploy_install.rc
  args:
      chdir:           "{{ __tmp_dir }}/mt/install"
  register:            autodeploy_install_performed

- name:                Check install return code
  become:              yes
  shell:               "cat {{ __tmp_dir }}/mt/install/autodeploy_install.rc"
  register:            return_code
  failed_when:
    - return_code.stdout != "0"
  when:
    - autodeploy_install_performed is not skipped

- name:               Search for success message in log
  become:             yes
  shell:              "grep -i 'AUTODEPLOY is now ready to rock your deployment' {{ __tmp_dir }}/mt/install/autodeploy_install.log"
  register:           grep_success_message
  failed_when:        grep_success_message.stdout|length == 0
  when:               not __mt_skip_error_checking|bool and autodeploy_install_performed is not skipped

- name:               "Create {{ __autodeploy_install_success_file }} file"
  file:
    path:             "{{ __autodeploy_install_success_file }}"
    state:            touch
  when:
    - autodeploy_install_performed is not skipped
