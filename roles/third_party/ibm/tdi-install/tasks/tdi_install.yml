- name:                 "Verifiy if TDI is already installed"
  stat:
    path:                "{{ __tdi_installed_success_file }}"
  register:              tdi_already_installed

- name:                  Clean up installation folder(s)
  file:
    path:                "{{ __extraction_folder }}"
    state:               absent
  when:
    - not tdi_already_installed.stat.exists

- name:                  Create installation folder
  file:
    path:                "{{ __extraction_folder }}"
    state:               directory
  when:
    - not tdi_already_installed.stat.exists

- name:                  Download and unzip installation {{ __package_name }} to the {{ __extraction_folder }}
  unarchive:
    src:                 "{{ __download_location }}/{{ __package_name }}"
    dest:                "{{ __extraction_folder }}"
    remote_src:          yes
    validate_certs:      false
  when:
    - not tdi_already_installed.stat.exists

- name:                  "Render {{ __tdi_rsp_location }}"
  template:
    src:                 "{{ __tdi_rsp_template }}"
    dest:                "{{ __tdi_rsp_location }}"
  when:
    - not tdi_already_installed.stat.exists

- name:                  "Install TDI"
  shell:                 "{{ __tdi_install_bin }} -f {{ __tdi_rsp_location }} -i silent"
  register:              tdi_install
  failed_when:           ( tdi_install.rc not in [0, 1] )
  when:
    - not tdi_already_installed.stat.exists

- name: Create tmp folder
  ansible.builtin.file:
    path: "{{ __tdi_temp_folder }}"
    state: directory
    mode: '0755'
  when:
    - not tdi_already_installed.stat.exists
    - __ldap_ssl_enabled |bool

- name: Create keystore for LDAPS
  ansible.builtin.shell: |
    openssl s_client -showcerts -connect {{ __ldap_server }} < /dev/null > {{ __tdi_temp_dir }}/temp-key.out
    openssl x509 -outform DER < {{ __tdi_temp_dir }}/temp-key.out > {{ __tdi_temp_dir }}/temp-key.der
    openssl x509 -inform der -in {{ __tdi_temp_dir }}/temp-key.der -out {{ __tdi_temp_dir }}/temp-key.pem
    {{ __tdi_user_install_dir }}/jvm/jre/bin/keytool -import -alias ldap-certificate -noprompt -keystore {{ __tdi_sol_dest }}/TDI/ldapcerts.jks -storepass {{ __tdi_keystore_password }} -file {{ __tdi_temp_dir }}/temp-key.pem
  when:
    - not tdi_already_installed.stat.exists
    - __ldap_ssl_enabled |bool

- name: Delete temp folder
  ansible.builtin.file:
    path: "{{ __tdi_temp_folder }}"
    state: absent
  when:
    - not tdi_already_installed.stat.exists
    - __ldap_ssl_enabled |bool

- name: Enable keystore in solution.properties
  ansible.builtin.blockinfile:
    dest: "{{ __tdi_sol_dest }}/TDI/solution.properties"
    block: |
      # Truststore
      javax.net.ssl.trustStore=ldapcerts.jks
      {protect}-javax.net.ssl.trustStorePassword={{ __tdi_keystore_password }}
      javax.net.ssl.trustStoreType=jks

      # KeyStore (can use the same key store as the trustStore!)
      javax.net.ssl.keyStore=ldapcerts.jks
      {protect}-javax.net.ssl.keyStorePassword={{ __tdi_keystore_password }}
      javax.net.ssl.keyStoreType=jks
    backup: true
  when:
    - __ldap_ssl_enabled |bool

- name:                  "Create {{ __tdi_installed_success_file }} file"
  file:
    path:                "{{ __tdi_installed_success_file }}"
    state:               touch
