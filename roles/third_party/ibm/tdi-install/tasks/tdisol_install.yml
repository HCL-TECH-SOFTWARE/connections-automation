- name:                  "Going to update tdisol from Connections kit: {{ __cnx_updates_enabled }} "
  debug:
    var:                 "{{ __cnx_updates_enabled }}"

- name:                  "Going to update tdisol from a separate tdisol tar: {{ tdi_sol_location }}"
  debug:
    var:                 tdi_sol_location is defined
  when:
    - tdi_sol_location is defined

- name:                  Clean up installation folder(s)
  file:
    path:                "{{ __cnx_extraction_folder }}"
    state:               absent
  when:
    - __cnx_updates_enabled  |bool or tdi_sol_location is defined

- name:                  Create installation folder
  file:
    path:                "{{ __cnx_extraction_folder }}"
    state:               directory
  when:
    - __cnx_updates_enabled  |bool or tdi_sol_location is defined

- name:                  Download and unzip installation {{ __cnx_package_name }} to the {{ __cnx_extraction_folder }}
  include_tasks:         download_unzip_tdisol.yml
  when:
    - __cnx_updates_enabled  |bool
    - tdi_sol_location is not defined

- name:                   "Extract {{ __cnx_extraction_folder }}/{{ __cnx_package_name }} to {{ __cnx_extraction_folder }}"
  unarchive:
    src:                  "{{ __cnx_extraction_folder }}/{{ __cnx_package_name }}"
    dest:                 "{{ __cnx_extraction_folder }}"
    remote_src: yes
  when:
    - tdi_sol_location is not defined
    - checksum_file_exists.status != 200 or calculated_checksum.stdout == checksum_value.stdout

- name:                   "Clean up {{ __cnx_package_name }}.sha256"
  file:
    path:                 "{{ __cnx_extraction_folder }}/{{ __cnx_package_name }}.sha256"
    state: absent

- name:                  Clean up tdisol installation folder(s)
  file:
    path:                "{{ __tdi_sol_dest }}"
    state:               absent
  when:
    - __cnx_updates_enabled  |bool or tdi_sol_location is defined

- name:                  "Create {{ __tdi_sol_dest }} folder"
  file:
    path:                "{{ __tdi_sol_dest }}"
    state:               directory
  when:
    - __cnx_updates_enabled  |bool or tdi_sol_location is defined

- name:                  Set up tdisol
  unarchive:
    src:                 "{{ __tdi_sol_location }}"
    dest:                "{{ __tdi_sol_dest }}"
    remote_src:          yes
    validate_certs:      false
  when:
    - __cnx_updates_enabled  |bool or tdi_sol_location is defined
  register: download_and_unpack_tdisol
  until: download_and_unpack_tdisol is succeeded
  retries: 3

- name:                  "Render {{ __tdienv_sh_dest }}"
  template:
    src:                 "{{ __tdienv_sh_template }}"
    dest:                "{{ __tdienv_sh_dest }}"

- name:                  "Render {{ __tdi_properties_dest }}"
  template:
    src:                 "{{ __tdi_properties_template }}"
    dest:                "{{ __tdi_properties_dest }}"

- name:                  "Render {{ __tdi_mdbrfs_destination }}"
  template:
    src:                 "{{ __tdi_mdbrfs_template }}"
    dest:                "{{ __tdi_mdbrfs_destination }}"

- name:                  Make files executable
  file:
    dest:                "{{ __tdi_sol_dest }}/TDI/{{ item }}"
    mode:                a+x
  with_items:
   - "clearRC.sh"
   - "collect_dns.sh"
   - "derby.sh"
   - "netstore"
   - "tdienv.sh"
   - "populate_from_dn_file.sh"

- name:                   Checking existing version for jre
  shell:                  "{{ __tdi_user_install_dir }}/jvm/jre/bin/./java -version 2>&1 | awk -F'\"' 'NR==1{ print $2 }'"
  register:               jre_version_stat

- debug:
    msg: "{{ jre_version_stat.stdout }}"

- name:                  "Copy DB2 JDBC files"
  copy:
    src:                 "{{ __db2_jdbc_location }}/{{ item }}"
    dest:                "{{ __jdbc_destination }}"
    remote_src:          yes
  with_items:
   - "db2jcc4.jar"
 #  The file db2jcc_license_cu.jar has been removed from the DB2 v12 java folder and is not required for CNX silent install 
#   - "db2jcc_license_cu.jar"
  when:
    - "'db2_servers' in groups"

- name:                  "Copy Oracle JDBC files for TDI JRE 7"
  get_url:
    url:                 "{{ __oracle_download_location }}/{{ item }}"
    dest:                "{{ __jdbc_destination }}"
    mode:                0755
    validate_certs:      false
  with_items:
   - "ojdbc7.jar"
  when:
    - "'oracle_servers' in groups"
    - "'1.7' in jre_version_stat.stdout"

- name:                  "Copy Oracle JDBC files for TDI JRE 8"
  get_url:
    url:                 "{{ __oracle_download_location }}/{{ item }}"
    dest:                "{{ __jdbc_destination }}"
    mode:                0755
    validate_certs:      false
  with_items:
   - "ojdbc8.jar"
  when:
    - "'oracle_servers' in groups"
    - "'1.8' in jre_version_stat.stdout"

- name:                  "Copy MSSQL JDBC files for TDI JRE 7"
  copy:
    src:                 "{{ __mssql_jdbc_location }}/{{ item }}"
    dest:                "{{ __jdbc_destination }}"
    remote_src:          yes
  with_items:
   - "sqljdbc41.jar"
  when:
    - "'mssql_servers' in groups"
    - "'1.7' in jre_version_stat.stdout"

- name:                  "Copy MSSQL JDBC files for TDI JRE 8"
  copy:
    src:                 "{{ __mssql_jdbc_jre8_location }}/{{ item }}"
    dest:                "{{ __jdbc_destination }}"
    remote_src:          yes
  with_items:
   - "sqljdbc42.jar"
  when:
    - "'mssql_servers' in groups"
    - "'1.8' in jre_version_stat.stdout"

# Connections specific KB0104118
- name:                 Update api.on to true in solution.properties (for SDI FP8/FP9)
  replace:
    path:               "{{ __tdi_sol_dest }}/TDI/solution.properties"
    regexp:             "^(#?)api.on ?=(.*)$"
    replace:            "api.on=true"
  when:
    - __upgrade_package_bin is search("FP0009")

- name:                 Check if LDAP keystore already exists
  stat:
    path:               "{{ __tdi_sol_dest }}/TDI/ldapcerts.jks"
  register:             ldap_keystore_stat

- name: Create tmp folder
  file:
    path: "{{ __tdi_temp_dir }}"
    state: directory
    mode: '0755'
  when:
    - not ldap_keystore_stat.stat.exists
    - __ldap_ssl_enabled |bool

- name: Create keystore for LDAPS
  shell: |
    openssl s_client -showcerts -connect {{ __ldap_server }}:{{ __ldap_server_port }} < /dev/null > {{ __tdi_temp_dir }}/temp-key.out
    openssl x509 -outform DER < {{ __tdi_temp_dir }}/temp-key.out > {{ __tdi_temp_dir }}/temp-key.der
    openssl x509 -inform der -in {{ __tdi_temp_dir }}/temp-key.der -out {{ __tdi_temp_dir }}/temp-key.pem
    {{ __tdi_user_install_dir }}/jvm/jre/bin/keytool -import -alias ldap-certificate -noprompt -keystore {{ __tdi_sol_dest }}/TDI/ldapcerts.jks -storepass {{ __tdi_keystore_password }} -file {{ __tdi_temp_dir }}/temp-key.pem
  when:
    - not ldap_keystore_stat.stat.exists
    - __ldap_ssl_enabled |bool

- name: Delete temp folder
  file:
    path: "{{ __tdi_temp_dir }}"
    state: absent
  when:
    - not ldap_keystore_stat.stat.exists
    - __ldap_ssl_enabled |bool

- name: Enable keystore in solution.properties
  blockinfile:
    dest: "{{ __tdi_sol_dest }}/TDI/solution.properties"
    block: |
      # Truststore
      javax.net.ssl.trustStore=ldapcerts.jks
      {protect}-javax.net.ssl.trustStorePassword={{ __tdi_keystore_password }}
      javax.net.ssl.trustStoreType=jks

      # KeyStore (can use the same key store as the trustStore!)
      javax.net.ssl.keyStore=ldapcerts.jks
      {protect}-javax.net.ssl.keyStorePassword={{ __tdi_keystore_password }}
      javax.net.ssl.keyStoreType=jks
    backup: true
  when:
    - __ldap_ssl_enabled |bool


- name:                  "Run collect_dns.sh"
  command:               "sh {{ __tdi_sol_dest }}/TDI/collect_dns.sh"
  register:              collectdns
  failed_when:           collectdns.rc != 0

- name:                  "Run populate_from_dn_file.sh"
  command:               "sh {{ __tdi_sol_dest }}/TDI/populate_from_dn_file.sh"
  register:              populatefromdnfile
  failed_when:           populatefromdnfile.rc != 0

- name:                  "Cleanup Binaries directory"
  file:
    state:               absent
    path:                "{{ __cnx_extraction_folder }}"
