- name:                   Download Haproxy
  unarchive:
    src:                  "{{ __haproxy_url }}"
    dest:                 "/tmp"
    copy:                 no
  tags:                   download_haproxy
  register: download_and_unpack_haproxy
  until: download_and_unpack_haproxy is succeeded
  retries: 3
  when:
    - ansible_facts['distribution'] not in ['RedHat', 'AlmaLinux', 'SLES']

- name:                   Build Haproxy target with params
  make:
    chdir:                "{{ __haproxy_download_dir }}"
    target:               all
    params:
      TARGET:             linux_glibc
      USE_PCRE:           1
      USE_OPENSSL:        1
      ARCH:               x86_64
      PCRE_LIB:           /usr/lib64
      SSL_LIB:            /usr/lib64
  when:
    - ansible_facts['distribution'] not in ['RedHat', 'AlmaLinux', 'SLES']

- name:                   Install Haproxy
  make:
    chdir:                "{{ __haproxy_download_dir }}"
    target:               install
  when:
    - ansible_facts['distribution'] not in ['RedHat', 'AlmaLinux', 'SLES']

- name:                   Update all packages
  yum:
    name:                 '*'
    state:                latest
  when:
    - ansible_distribution == "RedHat" or ansible_distribution == "AlmaLinux"

- name:                   Add HAProxy repository for SUSE
  command:                zypper addrepo https://download.opensuse.org/repositories/server:http/{{ ansible_distribution_version }}/server:http.repo
  when:
    - ansible_distribution == "SLES"

- name:                   Refresh all zypper repositories on SUSE
  command:                zypper --non-interactive --gpg-auto-import-keys refresh
  when:
    - ansible_distribution == "SLES"

- name:                   Install HAProxy package for SUSE
  command:                zypper install -y haproxy
  when:
    - ansible_distribution == "SLES"


- name:                   Install HAProxy package
  yum:
    name:                 haproxy
    state:                present
  when:
    - ansible_distribution == "RedHat" or ansible_distribution == "AlmaLinux"
